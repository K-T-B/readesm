readESM - digital tachograph file reader

This program takes an ESM file, as downloaded from a digital tachograph or a
driver card, a compulsory equipment for trucks heavier than 3.5 tons within the
European Union. It converts said files into human-readable form, either html or
simple plaintext.

So far the program just does this conversion, with a few datasets still unread,
and does little analysis of the data. More analysis is planned for the future,
but any serious attempt requires refactoring the data heavily, which might never
be done due to time constraints.

The digital tachographs and respective cards use a quite elaborate security
model, with 1024-bit rsa, sha-1 hashes and individual certificates on each card
signed by ec member states authorities. The software checks the signatures and
certification chain for correctness, but no effort is made to circumvent the
security mechanisms (and since all important data in the files is protected by
industry-standard signatures, that would be a daunting task anyway).

The language of the project is C++, and development is done on a linux platform,
but it should be possible to compile it on any platform with a C++-compiler,
boost and the stdlib. Right now it also uses the Gnu MP library and libgcrypt,
but if signature checking is not needed that could simply be commented out.

Compiling
You can get the program files from my homepage
(http://andreas.goelzer.de/readesm-reading-digital-tachograph-files), or from
the development page (http://sourceforge.net/projects/readesm/) at Sourceforge.
Since so far there is no binary distribution for the program, you will have to
compile it yourself.
To do that, you need a C++ compiler, parts of the boost (http://www.boost.org/)
library (specifically program_options and shared_ptr) and the Gnu MP Library
(http://gmplib.org/), which is used to check the various RSA signatures. Once
all those are installed, typing make/make install should work fine. If not, it
might give you a hint what is still needed, if not, report your error. For
certain linux flavours, "make package" will create a package using checkinstall,
which you can easily uninstall with your package management tool.
On Ubuntu (http://www.ubuntu.com/) systems, you will need to do something like:

svn co https://readesm.svn.sourceforge.net/svnroot/readesm readesm
sudo apt-get install libboost-program-options-dev libgcrypt11-dev libgmp3-dev
make
sudo make install

Or use some method that integrates it into your package manager, like
aforementioned checkinstall.

Running the program
In most circumstances, you will run the program from the commandline like this:
readesm --infile foo.esm --outfile bar.html --format=html
Alternatively, if no output file is specified, stdout is used.
For KDE (http://www.kde.org/) users, i wrote a little wrapper script named
readesm-wrap-kde.sh. It will get installed my typing make install. If you
associate esm files with it, you can click on one in your kde file manager, and
it will open a konqueror window containing the html result.


Modifying the program
You are free to modify the program under the terms of the GPL.
If you do so, note:
- Sometimes i added references to l207.pdf in the comments, that refers to
OJ:L:2002:207, p. 1-252,
http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:2002:207:0001:0252:EN
:PDF
- The code is rather unclean, often two or more classes in the same file, wild
naming convention(often taken from the european law, which has quite large
names.
- You can create a doxygen documentation by typing make doc, or within an
appropriate IDE.

Andreas GÃ¶lzer
April 25th, 2009
http://andreas.goelzer.de/
