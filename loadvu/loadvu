#!/usr/bin/python
# -*- coding: utf-8 -*-

## Tool to read tachograph data from a vehicle unit connected serially 
## Copyright(C) 2011 Andreas GÃ¶lzer

#This is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.

#It is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

#You should have received a copy of the GNU General Public License along with
#this program.  If not, see <http://www.gnu.org/licenses/>.

#see http://andreas.goelzer.de/serial-download-from-a-digital-tachograph-in-python
#for help
import vuserial
from optparse import OptionParser
import timestampsutc
from time import time
from os import system

parser = OptionParser(
		version="%prog 2011.11", 
		description="Tool to download data from a digital tachograph vehicle unit using a serial connection. " +
			"See http://andreas.goelzer.de/serial-download-from-a-digital-tachograph-in-python for details."
		)
parser.add_option("-s", "--serial", dest="serial",
		help="serial terminal the VU is connected to", default='/dev/ttyUSB0', metavar="FILE")
parser.add_option("-o", "--output", dest="output", default='', metavar="FILE",
		help="Save data to this file (default: try to choose an appropriate name)")
parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
		help="Print traffic to stdout")
parser.add_option("-f", "--first", dest="firstDate", metavar="DATE", default='', 
		help="First Date to download in ISO form, e.g. 2010-11-01")
parser.add_option("-l", "--last", dest="lastDate", metavar="DATE", default='', 
		help="Last Date to download in ISO form, e.g. 2010-11-01")
parser.add_option("-t", "--treps", dest="treps", metavar="N", default='2,3,4,5,6', 
		help="Extra TREPS to get in addition to overview block (default: 2,3,4,5,6 (those are the ones defined in the standard))")
parser.add_option("-r", "--readesm", dest="readesm", action="store_true", default=False,
		help="Open file in readesm after download")

(options, args) = parser.parse_args()
treps = options.treps.split(",")


print "This is untested, use the last release or hack this into working state"
startTime = time()
try:
	vu = vuserial.vuSerial(options.serial)
except vuserial.malformedHeader as err:
	print err
	print "Could not open a connection to the vehicle unit.  Check that the cable is plugged into the VU and that the VU is connected to " + options.serial + "."
	exit(2)
except vuserial.SerialException as err:
	print err
	print "This usually means " + options.serial + " could not be opened.  Check that the USB cable is plugged into the computer."
	exit(2)
if not vu.open:
	exit(2)
try:
	#get overview block
	data = vu.getBlock(1)
	vehicleId = data[390:390+17].strip()
	vehicleReg = data[409:409+13].strip()
	vehicleName = vehicleReg
	if vehicleName == "":
		vehicleName = vehicleId
	print "Read data from vehicle unit in " + vehicleName
	minDate = timestampsutc.unpackTimestamp(data[426:430])
	maxDate = timestampsutc.unpackTimestamp(data[430:434])
	timerange = timestampsutc.formatTimestamp(minDate) + " to " + timestampsutc.formatTimestamp(maxDate)
	print "Downloadable data is from " + timerange

	filename = options.output
	if(filename == ""):
		filename = vehicleName + " "
		if "2" in treps:
			filename += timerange
		else:
			filename += timestampsutc.formatTimestamp(maxDate)
		filename += ".esm"
		
	esmfile = open(filename,"w")
	esmfile.write(data)
	esmfile.flush()
	
	#get daily activity data. 
	if "2" in treps:
		if(options.firstDate != ''):
			minDate = timestampsutc.dateToTimestamp(options.firstDate)
		if(options.lastDate != ''):
			maxDate = timestampsutc.dateToTimestamp(options.lastDate)
		print "Downloading data from " +  timestampsutc.formatTimestamp(minDate) + " to " + timestampsutc.formatTimestamp(maxDate)
		for daydate in range(minDate, maxDate + 1, 86400):
			print "Downloading data for " +  timestampsutc.formatTimestamp(daydate)
			try:
				data = vu.getBlock(2, timestampsutc.packTimestamp(daydate))
				esmfile.write(data)
				esmfile.flush()
			except vuserial.vuErrorMessage as err:
				print err
			except vuserial.communicationError as err:
				print err

	#get other blocks
	if "2" in treps:
		treps.remove("2")
	for TREP in treps:
		print "asking for data block TREP", TREP
		try:
			data = vu.getBlock(int(TREP))
			esmfile.write(data)
			esmfile.flush()
		except vuserial.vuErrorMessage as err:
			print err
		except vuserial.communicationError as err:
			print err
except KeyboardInterrupt:
	print "Aborting after user input. Saving partial data and trying to close the connection gracefully"

dataSize = esmfile.tell()
esmfile.close()
vu.close()
elapsedTime = time() - startTime
print "data saved to " + filename
print "Got " + str(dataSize) + " Byte in " + str(elapsedTime) +" seconds. (" + str(dataSize / elapsedTime) + " Byte/s)"
if options.readesm:
	system("readesm \"" + filename+"\" &")